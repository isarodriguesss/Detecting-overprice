# -*- coding: utf-8 -*-
"""Cópia de Análise estatística descritiva 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MzPKMgaXCsrYdy1c_qNIetYscS71Yw_J

# Set up
"""

from google.colab import drive
drive.mount('/content/drive')

cd '/content/drive/My Drive/deteccao_sobrepreco/'

!ls -lah

import pandas as pd
from datetime import datetime, timedelta
import numpy as np
import networkx as nx
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

"""# Reading and treating data"""

notas = pd.read_csv('Notas_Fiscais.csv', sep=',', encoding='latin1', low_memory=False, dtype={
    'Numero': str, 'Data_de_emissao': str, 'Situacao': str, 'Valor_total_da_nota': float,
    'Nome_razao_social_emit': str, 'CPF_CNPJ_emit': str, 'Endereco_emit': str,
    'Bairro_distrito_emit': str, 'CEP_emit': str, 'Municipio_emit': str, 'Nome_razao_social_dest': str,
    'CPF_CNPJ_dest': str, 'Endereco_dest': str, 'Bairro_distrito_dest': str, 'CEP_dest': str,
    'Municipio_dest': str, 'Base_de_Calculo_do_ICMS': float, 'Valor_do_ICMS': float,
    'Base_de_calculo_do_ICMS_substituicao': float, 'Valor_do_ICMS_substituicao': float,
    'Valor_total_dos_produtos': float, 'Valor_do_frete': float, 'Valor_do_seguro': float, 'Valor_desconto': float,
    'Valor_outras_despesas_acessorias': float, 'Valor_do_IPI': float, 'Valor_total_ICMS_UF_dest': float,
    'Valor_total_ICMS_UF_remet': float, 'Valor_BC_ICMS_UF_dest': float, 'Aliquota_interna_UF_dest': float,
    'Aliquota_interestadual_UF_env': float, 'Perc_prov_partilha_UF': float, 'Perc_ICMS_FCP_UF_dest': float,
    'Valor_ICMS_FCP_UF_dest': float, 'Valor_ICMS_partilha_UF_dest': float, 'Valor_ICMS_partilha_UF_remet': float,
    'Nr_item': str, 'Cod_prod': str, 'Descricao_do_Produto_ou_servicos': str, 'NCM_prod': str, 'CST_prod': str,
    'CFOP_prod': str, 'Quant_prod': float, 'Valor_unit_prod': float, 'Valor_total_prod': float,
    'Valor_desconto_item': float, 'BC_ICMS_prod': float, 'Valor_ICMS_prod': float, 'Aliq_ICMS_prod': float,
    'BC_ICMS_ST_prod': float, 'Valor_ICMS_ST_prod': float, 'Aliq_ICMS_ST_prod': float, 'Valor_IPI_prod': float,
    'Aliq_IPI_prod': float, 'Valor_PMC_prod': float, 'Cod_EAN': str, 'Info_Adicional_Item': str,
    'Informacoes_adicionais_do_FISCO': str, 'Informacoes_complementares': str, 'Unid_prod': str,
    'Metrica': str})

notas.head()

notas.columns

notas.rename(columns={'Descricao_do_Produto_ou_servicos':'descricao','Cod_EAN':'ean','NCM_prod':'ncm'},inplace=True)
notas = notas.loc[notas['Situacao'] == 'A']
notas['descricao'] = notas['descricao'].apply(lambda x: str(x).upper())
notas['Municipio_dest'] = notas['Municipio_dest'].apply(lambda x: str(x).upper())
notas['Data_de_emissao'] = notas['Data_de_emissao'].apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S').date())

cenoura = notas[notas['descricao'] == 'CENOURA'][['Data_de_emissao','Valor_total_da_nota','Municipio_dest','Valor_total_dos_produtos','Valor_desconto','Quant_prod',
                                           'Valor_unit_prod','Valor_total_prod','CPF_CNPJ_emit','Unid_prod','ncm','ean','descricao']].sort_values('Valor_unit_prod',ascending=False)

tomate = notas[notas['descricao'] == 'TOMATE'][['Data_de_emissao','Valor_total_da_nota','Municipio_dest','Valor_total_dos_produtos','Valor_desconto','Quant_prod',
                                           'Valor_unit_prod','Valor_total_prod','CPF_CNPJ_emit','Unid_prod','ncm','ean','descricao']].sort_values('Valor_unit_prod',ascending=False)

cebola = notas[notas['descricao'] == 'CEBOLA'][['Data_de_emissao','Valor_total_da_nota','Municipio_dest','Valor_total_dos_produtos','Valor_desconto','Quant_prod',
                                           'Valor_unit_prod','Valor_total_prod','CPF_CNPJ_emit','Unid_prod','ncm','ean','descricao']].sort_values('Valor_unit_prod',ascending=False)

alho = notas[notas['descricao'] == 'ALHO'][['Data_de_emissao','Valor_total_da_nota','Municipio_dest','Valor_total_dos_produtos','Valor_desconto','Quant_prod',
                                           'Valor_unit_prod','Valor_total_prod','CPF_CNPJ_emit','Unid_prod','ncm','ean','descricao']].sort_values('Valor_unit_prod',ascending=False)

batata_inglesa = notas[notas['descricao'] == 'BATATA INGLESA'][['Data_de_emissao','Valor_total_da_nota','Municipio_dest','Valor_total_dos_produtos','Valor_desconto','Quant_prod',
                                           'Valor_unit_prod','Valor_total_prod','CPF_CNPJ_emit','Unid_prod','ncm','ean','descricao']].sort_values('Valor_unit_prod',ascending=False)

cuscuz = notas[notas['descricao'].str.contains('FLOCOS')][['Data_de_emissao','Valor_total_da_nota','Municipio_dest','Valor_total_dos_produtos','Valor_desconto','Quant_prod',
                                           'Valor_unit_prod','Valor_total_prod','CPF_CNPJ_emit','Unid_prod','ncm','ean','descricao']].sort_values('Valor_unit_prod',ascending=False)
cuscuz = cuscuz[cuscuz['descricao'].str.contains('MILHO')]
cuscuz = cuscuz[cuscuz['descricao'].str.contains('500G')]
cuscuz = cuscuz[~cuscuz['Unid_prod'].str.contains('FD')]
cuscuz = cuscuz[~cuscuz['Unid_prod'].str.contains('1')]
cuscuz = cuscuz[~cuscuz['Unid_prod'].str.contains('KG')]
s = cuscuz.shape[0]
cuscuz = cuscuz[int(0.05*s):int(0.95*s)]

"""# Function to create a matriz and an indicator of overprice"""

def sobrepreco_mun(dataframe, produto):
  empresa = {'cnpj':[],'periodo':[],'matriz':[],'valor_total':[],'produto':[]}
  periodos = []

  cnpj = dataframe['CPF_CNPJ_emit'].value_counts().to_frame()
  cnpj = cnpj.loc[cnpj['CPF_CNPJ_emit'] >= 180].index

  for n in cnpj:
    for i in range(1,13):
      start_date = datetime(year=2016, month=i, day=1).date()
      end_date = datetime(year=2016, month=i+1 if i < 12 else i, day=1).date()
      filtro_data = (dataframe['Data_de_emissao'] >= start_date) & (dataframe['Data_de_emissao'] < end_date)
      df = dataframe[(dataframe['CPF_CNPJ_emit']== n) & filtro_data]
      valor_total = df['Valor_total_prod'].sum()

      municipios = df['Municipio_dest'].unique()

      matriz = pd.DataFrame(np.zeros((len(municipios),len(municipios))),columns=municipios)
      matriz['index'] = municipios
      matriz = matriz.set_index('index')
      empresa['cnpj'].append(n)
      empresa['periodo'].append(str(str(i)+'-'+str(i+1)))
      empresa['valor_total'].append(valor_total)
      empresa['produto'].append(produto)

      for x in municipios:
        for y in municipios:
          max_x = df[df['Municipio_dest'] == x].max()['Valor_unit_prod']
          min_y = df[df['Municipio_dest'] == y].min()['Valor_unit_prod']
          valor = max_x-min_y

          matriz[y][x] = valor

      empresa['matriz'].append(matriz)

  empresa = pd.DataFrame(data=empresa)
  empresa['indicador'] = empresa['matriz'].apply(lambda x: (np.absolute(x.values).sum())/(x.shape[0]**2))
  empresa['n_municipios'] = empresa['matriz'].apply(lambda x: x.shape[0])
  empresa = empresa.dropna(subset=['indicador'])
  empresa['peso'] = empresa['indicador']*empresa['valor_total']

  return empresa

cenoura_ = sobrepreco_mun(cenoura,'cenoura')
tomate_ = sobrepreco_mun(tomate,'tomate')
cebola_ = sobrepreco_mun(cebola,'cebola')
alho_ = sobrepreco_mun(alho,'alho')
batata_ingl = sobrepreco_mun(batata_inglesa,'batata_inglesa')
cuscuz_ = sobrepreco_mun(cuscuz, 'cuscuz')

"""# Result of comparing the values of the sale of the same company to different counties

Price comparison of carrot sales
"""

cenoura_

"""Matrix of counties with values of possible overprice indicators"""

cenoura_["matriz"].values[8]

"""## Plots of the average difference in sales prices between counties"""

px.scatter(cuscuz_,x='indicador',y='n_municipios',hover_data=['cnpj','periodo','valor_total'],size='valor_total',color='cnpj',labels={
                     "n_municipios": "Number of counties",
                     "indicador": "Average difference in sales prices between counties (R$)",
                     'cnpj':'National Register of Legal Entity (CNPJ)'
                 }, title='Corn Flakes ({} R$ of median)'.format(cuscuz['Valor_unit_prod'].median()))

px.scatter(cenoura_,x='indicador',y='n_municipios',hover_data=['cnpj','periodo','valor_total'],size='valor_total',color='cnpj',labels={
                     "n_municipios": "Number  of Counties",
                     "indicador": "Indicator",
                     'cnpj':'National Register of Legal entity (CNPJ)'
                 }, title='Carrots')

px.scatter(tomate_,x='indicador',y='n_municipios',hover_data=['cnpj','periodo'],size='valor_total',color='cnpj',labels={
                     "n_municipios": "Number  of Counties",
                     "indicador": "Indicator",
                     'cnpj':'National Register of Legal entity (CNPJ)'
                 }, title='Tomato')

px.scatter(cebola_,x='indicador',y='n_municipios',hover_data=['cnpj','periodo'],size='valor_total',color='cnpj',labels={
                    "n_municipios": "Number  of Counties",
                     "indicador": "Indicator",
                     'cnpj':'National Register of Legal entity (CNPJ)'
                 }, title='Onoin')

px.scatter(alho_,x='indicador',y='n_municipios',hover_data=['cnpj','periodo'],size='valor_total',color='cnpj',labels={
                     "n_municipios": "Number  of Counties",
                     "indicador": "Indicator",
                     'cnpj':'National Register of Legal entity (CNPJ)'
                 }, title='Garlic')

px.scatter(batata_ingl,x='indicador',y='n_municipios',hover_data=['cnpj','periodo'],size='valor_total',color='cnpj',labels={
                     "n_municipios": "Number  of Counties",
                     "indicador": "Indicator",
                     'cnpj':'National Register of Legal entity (CNPJ)'
                 }, title='Potato')

"""# Result of price difference in the same counties"""

def sobrepreco(dataframe,cnpj):
  empresa = pd.DataFrame()
  periodos = []

  cnpj = dataframe['CPF_CNPJ_emit'].value_counts().to_frame()
  cnpj = cnpj.loc[cnpj['CPF_CNPJ_emit'] >= 180].index

  for n in cnpj:
    for i in range(1,13):
      start_date = datetime(year=2016, month=i, day=1).date()
      end_date = datetime(year=2016, month=i+1 if i < 12 else i, day=1).date()
      filtro_data = (dataframe['Data_de_emissao'] >= start_date) & (dataframe['Data_de_emissao'] < end_date)
          
      df = dataframe[(dataframe['CPF_CNPJ_emit']== n) & filtro_data]
            
      max = df.groupby(['Municipio_dest']).max()['Valor_unit_prod']
      min = df.groupby(['Municipio_dest']).min()['Valor_unit_prod']
      med = df.groupby(['Municipio_dest']).median()['Valor_unit_prod']
      dif = max-min
      porcentagem = (dif/min)*100

      transp = pd.DataFrame()
      transp = transp.append(dif).transpose()
      transp.columns=['difference']
      transp['period'] = str(str(i)+'-'+str(i+1))
      transp['company'] = n
      transp['percentage(max/min)'] = porcentagem
      
      empresa = empresa.append(transp)
    
  empresa = empresa.reset_index().rename(columns={'index':'county'})
  return empresa

cenoura = sobrepreco(dataframe=cenoura,cnpj=['08792028000110','16759351000110','24506743000104','09087805000199','00301402000126'])
tomate = sobrepreco(dataframe=tomate,cnpj=['16759351000110', '08792028000110','09087805000199','24506743000104','13407964000109'])
cebola = sobrepreco(dataframe=cebola,cnpj=['16759351000110','08792028000110','24506743000104','09087805000199','02775367000102'])
alho = sobrepreco(dataframe=alho,cnpj=['16759351000110','08792028000110','19074142000121','18107594000108','02927946000123'])
batata_inglesa = sobrepreco(dataframe=batata_inglesa,cnpj=['24506743000104','08792028000110','09087805000199','13407964000109','00301402000126'])

"""Price comparison of carrot sales"""

cenoura[cenoura['difference']!=0].sort_values('difference',ascending=False)

"""Price comparison of tomato sales"""

tomate[tomate['difference']!=0].sort_values('difference',ascending=False)

"""Price comparison of onion sales"""

cebola[cebola['difference']!=0].sort_values('difference',ascending=False)

"""Price comparison of garlic sales"""

alho[alho['difference']!=0].sort_values('difference',ascending=False)

"""Price comparison of potato sales"""

batata_inglesa[batata_inglesa['difference']!=0].sort_values('difference',ascending=False)